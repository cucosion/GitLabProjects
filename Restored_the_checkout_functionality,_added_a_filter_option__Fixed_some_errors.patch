Index: src/main/resources/META-INF/plugin.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/META-INF/plugin.xml	(date 1527102575000)
+++ src/main/resources/META-INF/plugin.xml	(date 1527431129886)
@@ -38,6 +38,7 @@
                                  provider="com.ppolivka.gitlabprojects.configuration.SettingsConfigurableProvider"/>
         <projectService serviceInterface="com.ppolivka.gitlabprojects.configuration.ProjectState"
                         serviceImplementation="com.ppolivka.gitlabprojects.configuration.ProjectState"/>
+        <checkoutProvider implementation="com.ppolivka.gitlabprojects.checkout.GitLabCheckoutProvider" id="GitLabProjectList" order="FIRST" />
 
     </extensions>
 
Index: src/main/java/com/ppolivka/gitlabprojects/checkout/GitLabCheckoutProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/ppolivka/gitlabprojects/checkout/GitLabCheckoutProvider.java	(date 1527513052704)
+++ src/main/java/com/ppolivka/gitlabprojects/checkout/GitLabCheckoutProvider.java	(date 1527513052704)
@@ -0,0 +1,81 @@
+package com.ppolivka.gitlabprojects.checkout;
+
+import com.intellij.openapi.components.ServiceManager;
+import com.intellij.openapi.project.Project;
+import com.intellij.openapi.vfs.LocalFileSystem;
+import com.intellij.openapi.vfs.VirtualFile;
+import com.ppolivka.gitlabprojects.configuration.SettingsState;
+import git4idea.actions.BasicAction;
+import git4idea.checkout.GitCheckoutProvider;
+import git4idea.checkout.GitCloneDialog;
+import git4idea.commands.Git;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.File;
+
+import static com.ppolivka.gitlabprojects.util.MessageUtil.showInfoMessage;
+import static org.apache.commons.lang.StringUtils.isNotBlank;
+
+
+/**
+ * Checkourt provider for GitLab
+ *
+ * @author ppolivka
+ * @since 9.10.2015
+ */
+public class GitLabCheckoutProvider extends GitCheckoutProvider {
+
+    private Git myGit;
+    private SettingsState settingsState = SettingsState.getInstance();
+
+
+    public GitLabCheckoutProvider() {
+        super(ServiceManager.getService(Git.class));
+        myGit = ServiceManager.getService(Git.class);
+    }
+
+    @Override
+    public void doCheckout(final Project project, final Listener listener) {
+        if(settingsState.getAllServers().size() == 0) {
+            showInfoMessage(
+                    project,
+                    "No Gitlab Servers are configured. Please add your server in settings.",
+                    "No Gitlab Servers"
+            );
+        } else {
+            GitLabCheckoutDialog gitLabCheckoutDialog = new GitLabCheckoutDialog(project);
+            gitLabCheckoutDialog.show();
+            if (gitLabCheckoutDialog.isOK() && isNotBlank(gitLabCheckoutDialog.getLastUsedUrl())) {
+                showGitCheckoutDialog(project, listener, gitLabCheckoutDialog.getLastUsedUrl());
+            }
+        }
+    }
+
+    public void showGitCheckoutDialog(@NotNull Project project, @Nullable Listener listener, String preselectedUrl) {
+        BasicAction.saveAll();
+        GitCloneDialog dialog = new GitCloneDialog(project,preselectedUrl);
+       // dialog.prependToHistory(preselectedUrl);
+        if(dialog.showAndGet()) {
+            dialog.rememberSettings();
+            LocalFileSystem lfs = LocalFileSystem.getInstance();
+            File parent = new File(dialog.getParentDirectory());
+            VirtualFile destinationParent = lfs.findFileByIoFile(parent);
+            if(destinationParent == null) {
+                destinationParent = lfs.refreshAndFindFileByIoFile(parent);
+            }
+
+            if(destinationParent != null) {
+                String sourceRepositoryURL = dialog.getSourceRepositoryURL();
+                String directoryName = dialog.getDirectoryName();
+                String parentDirectory = dialog.getParentDirectory();
+                clone(project, this.myGit, listener, destinationParent, sourceRepositoryURL, directoryName, parentDirectory);
+            }
+        }
+    }
+
+    @Override
+    public String getVcsName() {
+        return "Git_Lab";
+    }
+}
Index: src/main/java/com/ppolivka/gitlabprojects/checkout/GitLabCheckoutDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/ppolivka/gitlabprojects/checkout/GitLabCheckoutDialog.java	(date 1527539184629)
+++ src/main/java/com/ppolivka/gitlabprojects/checkout/GitLabCheckoutDialog.java	(date 1527539184629)
@@ -0,0 +1,257 @@
+package com.ppolivka.gitlabprojects.checkout;
+
+import com.intellij.icons.AllIcons;
+import com.intellij.openapi.diagnostic.Logger;
+import com.intellij.openapi.options.ConfigurationException;
+import com.intellij.openapi.progress.ProgressIndicator;
+import com.intellij.openapi.progress.ProgressManager;
+import com.intellij.openapi.progress.Task;
+import com.intellij.openapi.project.Project;
+import com.intellij.openapi.ui.DialogWrapper;
+import com.intellij.ui.CollectionComboBoxModel;
+import com.intellij.ui.JBColor;
+import com.intellij.util.ui.JBImageIcon;
+import com.ppolivka.gitlabprojects.api.dto.ProjectDto;
+import com.ppolivka.gitlabprojects.api.dto.ServerDto;
+import com.ppolivka.gitlabprojects.common.GitLabIcons;
+import com.ppolivka.gitlabprojects.configuration.SettingsDialog;
+import com.ppolivka.gitlabprojects.configuration.SettingsState;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import javax.swing.*;
+import javax.swing.border.Border;
+import javax.swing.tree.*;
+import java.awt.*;
+import java.awt.event.*;
+import java.util.*;
+
+import static com.intellij.ui.JBColor.WHITE;
+import static com.ppolivka.gitlabprojects.util.MessageUtil.showErrorDialog;
+
+/**
+ * Dialog displayed when checking out new project
+ *
+ * @author ppolivka
+ * @since 28.10.2015
+ */
+public class GitLabCheckoutDialog extends DialogWrapper {
+
+    private static final Logger LOG = Logger.getInstance("#com.ppolivka.gitlabprojects.checkout.GitLabCheckoutDialog");
+
+    private JPanel mainView;
+    private JButton refreshButton;
+    private JTree allProjects;
+    private JComboBox serverList;
+    private JTextField filterTxtField;
+
+    private SettingsState settingsState = SettingsState.getInstance();
+
+    private SettingsDialog configurationDialog;
+    private String lastUsedUrl = "";
+    private Project project;
+
+
+    private DefaultTreeCellRenderer listingCellRenderer = new DefaultTreeCellRenderer();
+    private DefaultTreeCellRenderer loadingCellRenderer = new DefaultTreeCellRenderer();
+    private DefaultTreeCellRenderer filterCellRenderer = new DefaultTreeCellRenderer() {
+        private JLabel lblNull = new JLabel();
+
+        @Override
+        public Component getTreeCellRendererComponent(JTree tree, Object value,
+                                                      boolean arg2, boolean arg3, boolean arg4, int arg5, boolean arg6) {
+
+            Component c = super.getTreeCellRendererComponent(tree, value, arg2, arg3, arg4, arg5, arg6);
+
+            DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;
+            if (matchesFilter(node)) {
+                c.setForeground(Color.BLACK);
+                return c;
+            }
+            else if (containsMatchingChild(node)) {
+                c.setForeground(Color.GRAY);
+                return c;
+            }
+            else {
+                return lblNull;
+            }
+        }
+
+        private boolean matchesFilter(DefaultMutableTreeNode node) {
+            return node.toString().contains(filterTxtField.getText());
+        }
+
+        private boolean containsMatchingChild(DefaultMutableTreeNode node) {
+            Enumeration<DefaultMutableTreeNode> e = node.breadthFirstEnumeration();
+            while (e.hasMoreElements()) {
+                if (matchesFilter(e.nextElement())) {
+                    return true;
+                }
+            }
+
+            return false;
+        }
+    };
+
+    GitLabCheckoutDialog(@Nullable Project project) {
+        super(project);
+        this.project = project;
+        init();
+    }
+
+    @Override
+    protected void init() {
+        super.init();
+        setTitle("GitLab Checkout");
+        setHorizontalStretch(2);
+        setOKButtonText("Checkout");
+
+        Border emptyBorder = BorderFactory.createCompoundBorder();
+        refreshButton.setBorder(emptyBorder);
+
+//        ActionListener settingsDialogActionListener = event -> {
+//            configurationDialog = new SettingsDialog(project);
+//            configurationDialog.show();
+//            if(configurationDialog.isOK() && configurationDialog.isModified()){
+//                try {
+//                    configurationDialog.apply();
+//                } catch (ConfigurationException ignored) {
+//                }
+//                refreshTree();
+//            }
+//        };
+        filterTxtField.addActionListener(evt -> {
+            TreeModel model = allProjects.getModel();
+            allProjects.setModel(null);
+            allProjects.setModel(model);
+        });
+
+        ArrayList<ServerDto> servers = new ArrayList<>(settingsState.getAllServers());
+        CollectionComboBoxModel collectionComboBoxModel = new CollectionComboBoxModel(servers, servers.get(0));
+        serverList.setModel(collectionComboBoxModel);
+
+
+        listingCellRenderer.setClosedIcon(AllIcons.Nodes.Folder);
+        listingCellRenderer.setOpenIcon(AllIcons.Nodes.Folder);
+        listingCellRenderer.setLeafIcon(GitLabIcons.gitLabIcon);
+
+        filterCellRenderer.setClosedIcon(AllIcons.Nodes.Folder);
+        filterCellRenderer.setOpenIcon(AllIcons.Nodes.Folder);
+        filterCellRenderer.setLeafIcon(GitLabIcons.gitLabIcon);
+
+        loadingCellRenderer.setBackgroundNonSelectionColor(WHITE);
+        JBImageIcon loadingIcon = GitLabIcons.loadingIcon;
+        loadingIcon.setImageObserver(allProjects);
+        loadingCellRenderer.setLeafIcon(loadingIcon);
+        loadingCellRenderer.setTextNonSelectionColor(JBColor.GRAY);
+
+        allProjects.setCellRenderer(filterCellRenderer);
+        allProjects.setScrollsOnExpand(true);
+        allProjects.setAutoscrolls(true);
+        allProjects.setDragEnabled(false);
+        MouseListener ml = new MouseAdapter() {
+            @Override
+            public void mousePressed(MouseEvent e) {
+                okAction(false);
+                int selRow = allProjects.getRowForLocation(e.getX(), e.getY());
+                TreePath selPath = allProjects.getPathForLocation(e.getX(), e.getY());
+                if (selRow != -1) {
+                    DefaultMutableTreeNode selectedNode =
+                            ((DefaultMutableTreeNode) selPath.getLastPathComponent());
+                    String url = "";
+                    if (selectedNode.getChildCount() == 0 && !allProjects.isRootVisible()) {
+                        url = selectedNode.toString();
+                        okAction(true);
+                        lastUsedUrl = url;
+                        if (e.getClickCount() == 2) {
+                            close(OK_EXIT_CODE);
+                        }
+                    }
+                }
+            }
+        };
+        allProjects.addMouseListener(ml);
+        refreshButton.addActionListener(e -> refreshTree());
+        Set<ProjectDto> projectDtos = settingsState.getProjects();
+        reDrawTree(projectDtos == null ? noProjects() : projectDtos);
+        serverList.addActionListener(e -> refreshTree());
+
+    }
+
+    private void okAction(boolean enabled) {
+        try {
+            setOKActionEnabled(enabled);
+        } catch (Throwable t) {
+            // do nothing
+            LOG.debug("Error changing status of OK action.", t);
+        }
+    }
+
+    public String getLastUsedUrl() {
+        return lastUsedUrl;
+    }
+
+    private void refreshTree() {
+        if(serverList.getSelectedItem() == null) {
+            return;
+        }
+        treeLoading();
+        ProgressManager.getInstance().run(new Task.Backgroundable(project, "Refreshing Tree..") {
+            @Override
+            public void run(@NotNull ProgressIndicator progressIndicator) {
+                try {
+                    settingsState.reloadProjects((ServerDto) serverList.getSelectedItem());
+                    reDrawTree(settingsState.getProjects());
+                } catch (Throwable e) {
+                    showErrorDialog(project, "Cannot log-in to GitLab Server with provided token", "Cannot Login To GitLab");
+                }
+            }
+        });
+    }
+
+    private Set<ProjectDto> noProjects() {
+        return new HashSet<>();
+    }
+
+    private void treeLoading() {
+        allProjects.setCellRenderer(loadingCellRenderer);
+        allProjects.setRootVisible(true);
+        DefaultMutableTreeNode root = new DefaultMutableTreeNode("loading...");
+        allProjects.setModel(new DefaultTreeModel(root));
+    }
+
+    private void reDrawTree(Set<ProjectDto> projectDtos) {
+        allProjects.setCellRenderer(filterCellRenderer);
+        allProjects.setRootVisible(false);
+        DefaultMutableTreeNode root = new DefaultMutableTreeNode("My Projects");
+        Map<String, DefaultMutableTreeNode> namespaceMap = new HashMap<>();
+        for (ProjectDto projectDto : projectDtos) {
+            String namespace = projectDto.getNamespace();
+            DefaultMutableTreeNode namespaceNode;
+            if (namespaceMap.containsKey(namespace)) {
+                namespaceNode = namespaceMap.get(namespace);
+            } else {
+                namespaceNode = new DefaultMutableTreeNode(namespace);
+                namespaceMap.put(namespace, namespaceNode);
+            }
+
+            DefaultMutableTreeNode projectNode = new DefaultMutableTreeNode(projectDto.getName());
+            DefaultMutableTreeNode sshNode = new DefaultMutableTreeNode(projectDto.getSshUrl());
+            projectNode.add(sshNode);
+            DefaultMutableTreeNode httpNode = new DefaultMutableTreeNode(projectDto.getHttpUrl());
+            projectNode.add(httpNode);
+            namespaceNode.add(projectNode);
+        }
+        for (DefaultMutableTreeNode namespaceNode : namespaceMap.values()) {
+            root.add(namespaceNode);
+        }
+
+        allProjects.setModel(new DefaultTreeModel(root));
+    }
+
+    @Nullable
+    @Override
+    protected JComponent createCenterPanel() {
+        return mainView;
+    }
+}
Index: src/main/java/com/ppolivka/gitlabprojects/checkout/GitLabCheckoutDialog.form
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/ppolivka/gitlabprojects/checkout/GitLabCheckoutDialog.form	(date 1527537836587)
+++ src/main/java/com/ppolivka/gitlabprojects/checkout/GitLabCheckoutDialog.form	(date 1527537836587)
@@ -0,0 +1,80 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<form xmlns="http://www.intellij.com/uidesigner/form/" version="1" bind-to-class="com.ppolivka.gitlabprojects.checkout.GitLabCheckoutDialog">
+  <grid id="27dc6" binding="mainView" layout-manager="GridLayoutManager" row-count="2" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
+    <margin top="0" left="0" bottom="0" right="0"/>
+    <constraints>
+      <xy x="20" y="20" width="500" height="400"/>
+    </constraints>
+    <properties/>
+    <border type="none"/>
+    <children>
+      <scrollpane id="499bc">
+        <constraints>
+          <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="7" hsize-policy="7" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties>
+          <verticalScrollBarPolicy value="22"/>
+        </properties>
+        <border type="none"/>
+        <children>
+          <component id="bd632" class="javax.swing.JTree" binding="allProjects">
+            <constraints/>
+            <properties/>
+          </component>
+        </children>
+      </scrollpane>
+      <grid id="65256" layout-manager="GridLayoutManager" row-count="2" column-count="3" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
+        <margin top="0" left="0" bottom="0" right="0"/>
+        <constraints>
+          <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties/>
+        <border type="none"/>
+        <children>
+          <component id="95469" class="javax.swing.JButton" binding="refreshButton">
+            <constraints>
+              <grid row="1" column="1" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="0" indent="0" use-parent-layout="false"/>
+            </constraints>
+            <properties>
+              <text value="↻"/>
+              <toolTipText value="Refresh repositories"/>
+            </properties>
+          </component>
+          <component id="aef42" class="javax.swing.JLabel">
+            <constraints>
+              <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
+            </constraints>
+            <properties>
+              <text value="Actions:"/>
+            </properties>
+          </component>
+          <component id="48749" class="javax.swing.JLabel">
+            <constraints>
+              <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
+            </constraints>
+            <properties>
+              <text value="Gitlab Server:"/>
+            </properties>
+          </component>
+          <component id="8b7fb" class="javax.swing.JComboBox" binding="serverList">
+            <constraints>
+              <grid row="0" column="1" row-span="1" col-span="2" vsize-policy="0" hsize-policy="2" anchor="8" fill="1" indent="0" use-parent-layout="false"/>
+            </constraints>
+            <properties/>
+          </component>
+          <component id="39924" class="javax.swing.JTextField" binding="filterTxtField">
+            <constraints>
+              <grid row="1" column="2" row-span="1" col-span="1" vsize-policy="0" hsize-policy="6" anchor="8" fill="1" indent="0" use-parent-layout="false">
+                <preferred-size width="150" height="-1"/>
+              </grid>
+            </constraints>
+            <properties>
+              <text value=""/>
+              <toolTipText value=""/>
+            </properties>
+          </component>
+        </children>
+      </grid>
+    </children>
+  </grid>
+</form>
Index: src/main/java/com/ppolivka/gitlabprojects/api/dto/ProjectDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/ppolivka/gitlabprojects/api/dto/ProjectDto.java	(date 1527102575000)
+++ src/main/java/com/ppolivka/gitlabprojects/api/dto/ProjectDto.java	(date 1527536492822)
@@ -45,4 +45,26 @@
     public void setHttpUrl(String httpUrl) {
         this.httpUrl = httpUrl;
     }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        ProjectDto that = (ProjectDto) o;
+
+        if (name != null ? !name.equals(that.name) : that.name != null) return false;
+        if (namespace != null ? !namespace.equals(that.namespace) : that.namespace != null) return false;
+        if (sshUrl != null ? !sshUrl.equals(that.sshUrl) : that.sshUrl != null) return false;
+        return httpUrl != null ? httpUrl.equals(that.httpUrl) : that.httpUrl == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = name != null ? name.hashCode() : 0;
+        result = 31 * result + (namespace != null ? namespace.hashCode() : 0);
+        result = 31 * result + (sshUrl != null ? sshUrl.hashCode() : 0);
+        result = 31 * result + (httpUrl != null ? httpUrl.hashCode() : 0);
+        return result;
+    }
 }
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- gradle/wrapper/gradle-wrapper.properties	(date 1527102575000)
+++ gradle/wrapper/gradle-wrapper.properties	(date 1527495874733)
@@ -1,6 +1,6 @@
-#Thu Sep 28 13:23:43 CEST 2017
+#Mon May 28 11:24:34 EEST 2018
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-rc-2-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-rc-2-all.zip
Index: src/main/java/com/ppolivka/gitlabprojects/configuration/SettingsState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/ppolivka/gitlabprojects/configuration/SettingsState.java	(date 1527102575000)
+++ src/main/java/com/ppolivka/gitlabprojects/configuration/SettingsState.java	(date 1527536492973)
@@ -20,6 +20,8 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
 
 import static com.ppolivka.gitlabprojects.util.GitLabUtil.isGitLabUrl;
 
@@ -44,7 +46,7 @@
 
     public boolean defaultRemoveBranch;
 
-    public Collection<ProjectDto> projects = new ArrayList<>();
+    public Set<ProjectDto> projects = new HashSet<>();
 
     public Collection<ServerDto> servers = new ArrayList<>();
 
@@ -73,7 +75,7 @@
     }
 
     public void reloadProjects(Collection<ServerDto> serverDtos) throws Throwable {
-        setProjects(new ArrayList<>());
+        setProjects(new HashSet<>());
         for(ServerDto serverDto : serverDtos) {
             reloadProjects(serverDto);
         }
@@ -82,9 +84,9 @@
     public void reloadProjects(ServerDto serverDto) throws Throwable {
         ApiFacade apiFacade = api(serverDto);
 
-        Collection<ProjectDto> projects = getProjects();
+        Set<ProjectDto> projects = getProjects();
         if(projects == null) {
-            projects = new ArrayList<>();
+            projects = new HashSet<>();
         }
 
             for (GitlabProject gitlabProject : apiFacade.getProjects()) {
@@ -137,11 +139,11 @@
         this.defaultRemoveBranch = defaultRemoveBranch;
     }
 
-    public Collection<ProjectDto> getProjects() {
+    public Set<ProjectDto> getProjects() {
         return projects;
     }
 
-    public void setProjects(Collection<ProjectDto> projects) {
+    public void setProjects(Set<ProjectDto> projects) {
         this.projects = projects;
     }
 
